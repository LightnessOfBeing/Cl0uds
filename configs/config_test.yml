model_params:
  model: smp.Unet
  encoder_name: &encoder_name efficientnet-b2
  classes: 4
  activation: null

args:
  logdir: "./logs/clouds_logs"
  seed: 65
  check: False
  verbose: True

distributed_params:
  opt_level: O1

stages:
  data_params:
    batch_size: 8
    num_workers: 4
    df_train_name: "train.csv"
    path: "../../input/dataset_320x640"
    image_folder: "train_images"
    model_name: *encoder_name
    test_mode: true
    type: train

  state_params:
    main_metric: loss
    minimize_metric: true

  stage1:

    callbacks_params: &callbacks_params
      dice_metric:
        callback: CustomDiceCallback

      optimizer:
        callback: OptimizerCallback

      scheduler:
        callback: SchedulerCallback

      saver:
        callback: CheckpointCallback
        save_n_best: 2

      early_stop:
        callback: EarlyStoppingCallback
        patience: 5
        min_delta: 0.0005
        metric: loss

    state_params:
      num_epochs: 1

    criterion_params:
      criterion: BCEDiceLoss

    optimizer_params:
      optimizer: Adam
      layerwise_params:
        encoder.*:
          lr: 0.0001
        decoder.*:
          lr: 0.001

    scheduler_params:
      scheduler: ReduceLROnPlateau
      patience: 2

  #infer_postprocess:
  #  data_params:
  #    batch_size: 8
  #    num_workers: 4
  #    df_train_name: "train.csv"
  #    path: "../../input/dataset_320x640"
  #    image_folder: "train_images"
  #    model_name: efficientnet-b0
  #    type: test
  #
  #  state_params:
  #    num_epochs: 1
  #
  #  callbacks_params:
  #    post_processing:
  #      callback: PostprocessCallback

  infer:
    state_params:
      num_epochs: 1

    data_params:
      type: test

    callbacks_params:
      inference:
        callback: CustomInferCallback
        path: "../../input/dataset_320x640"
        threshold: 0.5
        mask_size: 15000
