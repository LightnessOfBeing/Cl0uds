#good

import gc
encoded_pixels = []
encoded_pixels_ch = []
names_pl = []
encoded_pixels_pl = []

image_id = 0
convex_hull = True
if convex_hull:
    print("convex hull is enabled")
    encoded_pixels_ch = []
sub_name = "orig_658_test"
image_id = 0
torch.cuda.empty_cache()
gc.collect()
class_params = {0: (0.3, 23000), 1: (0.5, 18000), 2: (0.6, 18000), 3: (0.4, 14000)}
#--------start-------------
class_params_orig = {0: (0.3, 25600), 1: (0.5, 20000), 2: (0.6, 20000), 3: (0.4, 15600)}
allow = True
cnt = 0

preds_write = [False, False, False, False]

low_t = 0.25
big_t = 0.75
pixel_percentage = 0.90
SZ = 320 * 640
#---------end------------

for _, test_batch in tqdm.tqdm(enumerate(loaders['test'])):
    runner_out = runner.predict_batch({"features": test_batch[0].cuda()})['logits']
    for _, batch in enumerate(runner_out):
        for probability in batch:
            probability = probability.cpu().detach().numpy()
# ---------------start----------------------
            pseudo_label = sigmoid(probability)
            pseudo_label[pseudo_label > big_t] = 1
            pseudo_label[pseudo_label < low_t] = 1
            pseudo_label[pseudo_label < big_t + 0.1] = 0
            val = pseudo_label.sum() / SZ
            preds_write[image_id % 4] = (probability, sub.iloc[image_id]["Image_Label"])
            if val < pixel_percentage:
                allow = False
#----------------end-----------------------
            if probability.shape != (350, 525):
                probability = cv2.resize(probability, dsize=(525, 350), interpolation=cv2.INTER_LINEAR)
                prediction, num_predict = post_process(sigmoid(probability), class_params[image_id % 4][0],
                                                   class_params[image_id % 4][1])
            if num_predict == 0:
                encoded_pixels.append('')
                if convex_hull:
                    encoded_pixels_ch.append('')
            else:
                r = mask2rle(prediction)
                encoded_pixels.append(r)
                if convex_hull:
                    r_ch = mask2rle(draw_convex_hull(prediction.astype(np.uint8)))
                    encoded_pixels_ch.append(r_ch)
            image_id += 1

#-----------------------------
            if image_id % 4 == 0:
                if allow:
                    for ind, (prob, name) in enumerate(preds_write):
                        names_pl.append(name)
                        predict_pl, num_predict_pl = post_process(sigmoid(prob), class_params_orig[ind][0], class_params_orig[ind][1], (320, 640))
                        if num_predict_pl == 0:
                            encoded_pixels_pl.append('')
                        else:
                            r_pl = mask2rle(predict_pl)
                            encoded_pixels_pl.append(r_pl)
                allow = True
#-----------------------------

sub = pd.read_csv(f'{path}/sample_submission.csv')
sub['EncodedPixels'] = encoded_pixels
sub.to_csv(f'submission_{sub_name}.csv', columns=['Image_Label', 'EncodedPixels'], index=False)
if convex_hull:
    sub_ch = sub.copy()
    sub_ch["EncodedPixels"] = encoded_pixels_ch
    sub_ch.to_csv(f'submission_{sub_name}_ch.csv', columns=['Image_Label', 'EncodedPixels'], index=False)
#!kaggle competitions submit -c understanding_cloud_organization -f submission_orig_658.csv -m "sub normal"
